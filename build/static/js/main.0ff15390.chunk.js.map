{"version":3,"sources":["components/Wrapper.js","components/Screen.js","components/ButtonBox.js","components/Button.js","App.js","index.js"],"names":["Wrapper","children","className","Screen","value","mode","max","ButtonBox","Button","onClick","btnValues","toLocaleString","num","String","removeSpaces","toString","replace","App","useState","sign","res","isWaitting","calc","setCalc","sleep","milliseconds","Promise","resolve","setTimeout","numClickHandler","e","preventDefault","target","innerHTML","console","log","length","Number","comaClickHandler","includes","signClickHandler","equalsClickHandler","a","math","b","invertClickHandler","percentClickHandler","parseFloat","Math","pow","resetClickHandler","flat","map","btn","i","key","rootElement","document","getElementById","ReactDOM","render","StrictMode","basename","process"],"mappings":"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","file":"static/js/main.0ff15390.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = ({ children }) => {\n  return <div className=\"wrapper\">{children}</div>;\n};\n\nexport default Wrapper;\n","import React from \"react\";\nimport { Textfit } from \"react-textfit\";\nimport \"./Screen.css\";\n\nconst Screen = ({ value }) => {\n  return (\n    <Textfit className=\"screen\" mode=\"single\" max={70}>\n      {value}\n    </Textfit>\n  );\n};\n\nexport default Screen;\n","import React from \"react\";\nimport \"./ButtonBox.css\";\n\nconst ButtonBox = ({ children }) => {\n  return <div className=\"buttonBox\">{children}</div>;\n};\n\nexport default ButtonBox;\n","import React from \"react\";\nimport \"./Button.css\";\n\nconst Button = ({ className, value, onClick }) => {\n  return (\n    <button className={className} onClick={onClick}>\n      {value}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { useState } from \"react\";\n\nimport Wrapper from \"./components/Wrapper\";\nimport Screen from \"./components/Screen\";\nimport ButtonBox from \"./components/ButtonBox\";\nimport Button from \"./components/Button\";\n\nconst btnValues = [\n  [\"=\"],\n  [\"MC\",\"MR\",\"M-\",\"M+\",\"√\"],\n  [\"+/-\",7,8,9,\"/\"],\n  [\"▶\",4,5,6,\"X\"],\n  [\"C\",1,2,3,\"-\"],\n  [\"AC\",0,\"00\",\".\",\"+\"],\n];\n\nconst toLocaleString = (num) => String(num);\n\nconst removeSpaces = (num) => num.toString().replace(/\\s/g, \"\");\n\n\n\nconst App = () => {\n  // ステートの宣言\n  let [calc, setCalc] = useState({\n    // 選択された記号\n    sign: \"\",\n    // 入力された値\n    num: 0,\n    // 計算された値\n    res: 0,\n    //　待機中か\n    isWaitting: false\n  });\n\n  const sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // 数字ボタン（0〜9）のいずれかが押されたときだけ起動\n  //////////////////////////////////////////////////////////////////\n  const numClickHandler = (e) => {\n    e.preventDefault();\n    const value = e.target.innerHTML;\n\n    console.log(\"calc.num\",calc.num)\n    console.log(\"value\",value)\n    if (removeSpaces(calc.num).length < 16) {\n      setCalc({\n        ...calc,\n        num:\n          calc.num === 0 && value === \"0\" ? \"0\" : removeSpaces(calc.num) % 1 === 0\n            ? toLocaleString(Number(removeSpaces(calc.num + value)))\n            : toLocaleString(calc.num + value)\n            ,\n        res: !calc.sign ? 0 : calc.res,\n      });\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////\n  // commaClickHandler関数は、小数点(.)が押されたときだけ実行されます。\n  //////////////////////////////////////////////////////////////////\n  const comaClickHandler = (e) => {\n    e.preventDefault();\n    const value = e.target.innerHTML;\n\n    setCalc({\n      ...calc,\n      num: !calc.num.toString().includes(\".\") ? calc.num + value : calc.num,\n    });\n  };\n\n  //////////////////////////////////////////////////////////////////\n  // signClickHandler関数は、ユーザーが+、-、*、/のいずれかを押したときに実行されます。\n  //////////////////////////////////////////////////////////////////\n  const signClickHandler = (e) => {\n    setCalc({\n      ...calc,\n      sign: e.target.innerHTML,\n      res: !calc.res && calc.num ? calc.num : calc.res,\n      num: 0,\n    });\n  };\n\n  //////////////////////////////////////////////////////////////////\n  // equalsClickHandler関数は、equalsボタン（=）が押されたときの結果を計算する関数です。\n  //////////////////////////////////////////////////////////////////\n  async function equalsClickHandler(){\n    // ちょっとまってから計算結果を出す\n    setCalc({\n      ...calc,\n      isWaitting: true\n    })\n    await sleep(5000);\n    if (calc.sign && calc.num) {\n      const math = (a, b, sign) =>\n        sign === \"+\"\n          ? a + b\n          : sign === \"-\"\n          ? a - b\n          : sign === \"X\"\n          ? a * b\n          : a / b;\n\n      setCalc({\n        ...calc,\n        res:\n          calc.num === \"0\" && calc.sign === \"/\"\n            ? \"Can't divide with 0\"\n            : toLocaleString(\n                math(\n                  Number(removeSpaces(calc.res)),\n                  Number(removeSpaces(calc.num)),\n                  calc.sign\n                )\n              ),\n        sign: \"\",\n        num: 0,\n        isWaitting: false,\n      });\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////\n  // invertClickHandler関数は、まず入力された値（num）または計算された値（res）があるかどうかを確認し、\n  // -1を掛けて反転させる関数です。\n  //////////////////////////////////////////////////////////////////  \n  const invertClickHandler = () => {\n    setCalc({\n      ...calc,\n      num: calc.num ? toLocaleString(removeSpaces(calc.num) * -1) : 0,\n      res: calc.res ? toLocaleString(removeSpaces(calc.res) * -1) : 0,\n      sign: \"\",\n    });\n  };\n\n  //////////////////////////////////////////////////////////////////\n  // percentClickHandler関数は、入力された値（num）または計算された値（res）があるかどうかをチェックし、\n  // 組み込みのMath.pow関数（底値から指数への累乗を返す）を使ってパーセンテージを計算する関数です。\n  //////////////////////////////////////////////////////////////////  \n  const percentClickHandler = () => {\n    let num = calc.num ? parseFloat(removeSpaces(calc.num)) : 0;\n    let res = calc.res ? parseFloat(removeSpaces(calc.res)) : 0;\n    setCalc({\n      ...calc,\n      num: (num /= Math.pow(100, 1)),\n      res: (res /= Math.pow(100, 1)),\n      sign: \"\",\n    });\n  };\n\n  //////////////////////////////////////////////////////////////////\n  // resetClickHandler関数は、calcのすべての初期値をデフォルトにし、\n  // 電卓アプリが最初にレンダリングされたときのcalcの状態を返します。\n  ////////////////////////////////////////////////////////////////// \n  const resetClickHandler = () => {\n    setCalc({\n      ...calc,\n      sign: \"\",\n      num: 0,\n      res: 0,\n      isWaitting: false\n    });\n  };\n\n  return (\n    <Wrapper>\n      <Screen value={ calc.isWaitting ? \"おまちください\" : calc.num ? calc.num : calc.res} />\n      <ButtonBox>\n        {btnValues.flat().map((btn, i) => {\n          return (\n            <Button\n              key={i}\n              className={btn === \"=\" ? \"equals\" : \"\"}\n              value={btn}\n              onClick={\n                btn === \"C\"\n                  ? resetClickHandler\n                  : btn === \"+/-\"\n                  ? invertClickHandler\n                  : btn === \"%\"\n                  ? percentClickHandler\n                  : btn === \"=\"\n                  ? equalsClickHandler\n                  : btn === \"/\" || btn === \"X\" || btn === \"-\" || btn === \"+\"\n                  ? signClickHandler\n                  : btn === \".\"\n                  ? comaClickHandler\n                  : numClickHandler\n              }\n            />\n          );\n        })}\n      </ButtonBox>\n    </Wrapper>\n  );\n};\n\nexport default App;\n","import { BrowserRouter as Router } from 'react-router-dom';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}