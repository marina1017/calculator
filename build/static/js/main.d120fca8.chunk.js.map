{"version":3,"sources":["components/Wrapper.js","components/Screen.js","components/ButtonBox.js","components/Button.js","App.js","index.js"],"names":["Wrapper","children","className","Screen","value","mode","max","ButtonBox","Button","onClick","btnValues","toLocaleString","num","String","removeSpaces","toString","replace","waitSetting","sleep","milliseconds","Promise","resolve","setTimeout","App","useState","sign","res","isWaitting","memory","calc","setCalc","numClickHandler","e","preventDefault","target","innerHTML","length","Number","comaClickHandler","includes","signClickHandler","equalsClickHandler","a","math","b","invertClickHandler","rootClickHandler","parseFloat","Math","sqrt","deleteOneDigitClickHandler","slice","doubleClickHandler","percentClickHandler","pow","allClearClickHandler","clearClickHandler","memoryRecallClickHandler","memoryClearClickHandler","memoryPulusClickHandler","memoryMinusClickHandler","reduce","acc","val","concat","map","btn","i","key","rootElement","document","getElementById","ReactDOM","render","StrictMode","basename","process"],"mappings":"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","file":"static/js/main.d120fca8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = ({ children }) => {\n  return <div className=\"wrapper\">{children}</div>;\n};\n\nexport default Wrapper;\n","import React from \"react\";\nimport { Textfit } from \"react-textfit\";\nimport \"./Screen.css\";\n\nconst Screen = ({ value }) => {\n  return (\n    <Textfit className=\"screen\" mode=\"single\" max={70}>\n      {value}\n    </Textfit>\n  );\n};\n\nexport default Screen;\n","import React from \"react\";\nimport \"./ButtonBox.css\";\n\nconst ButtonBox = ({ children }) => {\n  return <div className=\"buttonBox\">{children}</div>;\n};\n\nexport default ButtonBox;\n","import React from \"react\";\nimport \"./Button.css\";\n\nconst Button = ({ className, value, onClick }) => {\n  return (\n    <button className={className} onClick={onClick}>\n      {value}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { useState } from \"react\";\n\nimport Wrapper from \"./components/Wrapper\";\nimport Screen from \"./components/Screen\";\nimport ButtonBox from \"./components/ButtonBox\";\nimport Button from \"./components/Button\";\n\nconst btnValues = [\n  [\"=\"],\n  [\"MC\",\"MR\",\"M-\",\"M+\",\"√\"],\n  [\"+/-\",7,8,9,\"/\"],\n  [\"▶\",4,5,6,\"X\"],\n  [\"C\",1,2,3,\"-\"],\n  [\"AC\",0,\"00\",\".\",\"+\"],\n];\n\nconst toLocaleString = (num) => String(num);\n\nconst removeSpaces = (num) => num.toString().replace(/\\s/g, \"\");\n\nconst waitSetting = {\n  waitTime: 1000,\n  waitWard: \"おまちください\",\n}\n\nconst sleep = (milliseconds) => {\n  return new Promise(resolve => setTimeout(resolve, milliseconds))\n}\n\nconst App = () => {\n\n  // ステートの宣言\n  let [calc, setCalc] = useState({\n    // 選択された記号\n    sign: \"\",\n    // 入力された値\n    num: 0,\n    // 計算された値\n    res: 0,\n    //　待機中か\n    isWaitting: false,\n    // メモリー\n    memory: 0,\n  });\n\n  //////////////////////////////////////////////////////////////////\n  // 数字ボタン（0〜9）のいずれかが押されたときだけ起動\n  //////////////////////////////////////////////////////////////////\n  const numClickHandler = (e) => {\n    e.preventDefault();\n    const value = e.target.innerHTML;\n    if (removeSpaces(calc.num).length < 16) {\n      setCalc({\n        ...calc,\n        num:\n          calc.num === 0 && value === \"0\" ? \"0\" : removeSpaces(calc.num) % 1 === 0\n            ? toLocaleString(Number(removeSpaces(calc.num + value)))\n            : toLocaleString(calc.num + value)\n            ,\n        res: !calc.sign ? 0 : calc.res,\n      });\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////\n  // commaClickHandler関数は、小数点(.)が押されたときだけ実行されます。\n  //////////////////////////////////////////////////////////////////\n  const comaClickHandler = (e) => {\n    e.preventDefault();\n    const value = e.target.innerHTML;\n\n    setCalc({\n      ...calc,\n      num: !calc.num.toString().includes(\".\") ? calc.num + value : calc.num,\n    });\n  };\n\n  //////////////////////////////////////////////////////////////////\n  // signClickHandler関数は、ユーザーが+、-、*、/のいずれかを押したときに実行されます。\n  //////////////////////////////////////////////////////////////////\n  const signClickHandler = (e) => {\n    setCalc({\n      ...calc,\n      sign: e.target.innerHTML,\n      res: !calc.res && calc.num ? calc.num : calc.res,\n      num: 0,\n    });\n  };\n\n  //////////////////////////////////////////////////////////////////\n  // equalsClickHandler関数は、equalsボタン（=）が押されたときの結果を計算する関数です。\n  //////////////////////////////////////////////////////////////////\n  async function equalsClickHandler(){\n    // ちょっとまってから計算結果を出す\n    setCalc({\n      ...calc,\n      isWaitting: true\n    })\n    await sleep(waitSetting.waitTime);\n\n    if (calc.sign && calc.num) {\n      const math = (a, b, sign) =>\n        sign === \"+\"\n          ? a + b\n          : sign === \"-\"\n          ? a - b\n          : sign === \"X\"\n          ? a * b\n          : a / b;\n\n      setCalc({\n        ...calc,\n        res:\n          calc.num === \"0\" && calc.sign === \"/\"\n            ? \"0でわれません\"\n            : toLocaleString(\n                math(\n                  Number(removeSpaces(calc.res)),\n                  Number(removeSpaces(calc.num)),\n                  calc.sign\n                )\n              ),\n        sign: \"\",\n        num: 0,\n        isWaitting: false,\n      });\n    } else {\n      setCalc({\n        ...calc,\n        isWaitting: false\n      })\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////\n  // invertClickHandler関数は、まず入力された値（num）または計算された値（res）があるかどうかを確認し、\n  // -1を掛けて反転させる関数です。\n  //////////////////////////////////////////////////////////////////\n  const invertClickHandler = () => {\n    setCalc({\n      ...calc,\n      num: calc.num ? toLocaleString(removeSpaces(calc.num) * -1) : 0,\n      res: calc.res ? toLocaleString(removeSpaces(calc.res) * -1) : 0,\n      sign: \"\",\n    });\n  };\n\n  //////////////////////////////////////////////////////////////////\n  // √のときだけ、起動\n  //////////////////////////////////////////////////////////////////\n  const rootClickHandler = () =>{\n    let num = calc.num ? parseFloat(removeSpaces(calc.num)) : 0;\n    let res = calc.res ? parseFloat(removeSpaces(calc.res)) : 0;\n\n    setCalc({\n      ...calc,\n      num: (Math.sqrt(num)),\n      res: (Math.sqrt(res)),\n    });\n  }\n  \n  //////////////////////////////////////////////////////////////////\n  // ▶のときだけ、一桁目を消す\n  //////////////////////////////////////////////////////////////////\n  const deleteOneDigitClickHandler = () =>{\n    let num = calc.num ? parseFloat(String(calc.num).slice( 0, -1)) : 0;\n    setCalc({\n      ...calc,\n      num: num ,\n    });\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // 00のときだけ、起動\n  //////////////////////////////////////////////////////////////////\n  const doubleClickHandler = () => {\n    let num = calc.num ? parseFloat(removeSpaces(calc.num)) : 0;\n    let res = calc.res ? parseFloat(removeSpaces(calc.res)) : 0;\n\n    setCalc({\n      ...calc,\n      num: num*100,\n      res: res*100,\n      sign: \"\",\n    });\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // percentClickHandler関数は、入力された値（num）または計算された値（res）があるかどうかをチェックし、\n  // 組み込みのMath.pow関数（底値から指数への累乗を返す）を使ってパーセンテージを計算する関数です。\n  //////////////////////////////////////////////////////////////////  \n  const percentClickHandler = () => {\n    let num = calc.num ? parseFloat(removeSpaces(calc.num)) : 0;\n    let res = calc.res ? parseFloat(removeSpaces(calc.res)) : 0;\n    setCalc({\n      ...calc,\n      num: (num /= Math.pow(100, 1)),\n      res: (res /= Math.pow(100, 1)),\n      sign: \"\",\n    });\n  };\n\n  //////////////////////////////////////////////////////////////////\n  // allClearClickHandler関数は、calcのすべての初期値をデフォルトにし、\n  // 電卓アプリが最初にレンダリングされたときのcalcの状態を返します。\n  ////////////////////////////////////////////////////////////////// \n  const allClearClickHandler = () => {\n    setCalc({\n      ...calc,\n      sign: \"\",\n      num: 0,\n      res: 0,\n      isWaitting: false,\n      memory: 0,\n    });\n  };\n\n  //////////////////////////////////////////////////////////////////\n  // Cはメモリ以外のcalcのすべての初期値をデフォルトにする\n  ////////////////////////////////////////////////////////////////// \n  const clearClickHandler = () => {\n    setCalc({\n      ...calc,\n      num: 0,\n      res: 0,\n    });\n  };\n\n  //////////////////////////////////////////////////////////////////\n  // MR（メモリーリコール）: 直前のメモリー計算の結果「メモリー値」を呼び出すキー\n  ////////////////////////////////////////////////////////////////// \n  const memoryRecallClickHandler = () => {\n    let num = calc.num ? parseFloat(removeSpaces(calc.num)) : 0;\n    let memory = calc.memory ? parseFloat(removeSpaces(calc.memory)) : 0;\n    setCalc({\n      ...calc,\n      num: memory\n    });\n  };\n\n  //////////////////////////////////////////////////////////////////\n  // MC（メモリークリア）: 現在の「メモリー値」をクリアするキー\n  ////////////////////////////////////////////////////////////////// \n  const memoryClearClickHandler = () => {\n    setCalc({\n      ...calc,\n      num: 0,\n      memory: 0,\n    });\n  };\n\n  //////////////////////////////////////////////////////////////////\n  // M+（メモリープラス）: 直前の数値または計算結果を「メモリー値」に足す時に押すキー\n  ////////////////////////////////////////////////////////////////// \n  const memoryPulusClickHandler = () => {\n    let num = calc.num ? parseFloat(removeSpaces(calc.num)) : 0;\n    let memory = calc.memory ? parseFloat(removeSpaces(calc.memory)) : 0;\n    \n    setCalc({\n      ...calc,\n      // 入力された値\n      num: 0,\n      memory: memory + num,\n    });\n  };\n\n  //////////////////////////////////////////////////////////////////\n  // M-（メモリーマイナス）: 直前の数値または計算結果を「メモリー値」に足す時に押すキー\n  ////////////////////////////////////////////////////////////////// \n  const memoryMinusClickHandler = () => {\n    let num = calc.num ? parseFloat(removeSpaces(calc.num)) : 0;\n    let memory = calc.memory ? parseFloat(removeSpaces(calc.memory)) : 0;\n\n    setCalc({\n      ...calc,\n      num: 0,\n      memory: memory - num,\n    });\n  };\n\n  return (\n    <Wrapper>\n      <Screen value={ calc.isWaitting ? waitSetting.waitWard : calc.num ? calc.num : calc.res} />\n      <ButtonBox>\n        {btnValues.reduce((acc, val) => acc.concat(val), []).map((btn, i) => {\n          return (\n            <Button\n              key={i}\n              className={btn === \"=\" ? \"equals\" : \"\"}\n              value={btn}\n              onClick={\n                btn === \"AC\"\n                  ? allClearClickHandler\n                  : btn === \"C\"\n                  ? clearClickHandler\n                  : btn === \"+/-\"\n                  ? invertClickHandler\n                  : btn === \"√\"\n                  ? rootClickHandler\n                  : btn === \"00\"\n                  ? doubleClickHandler\n                  : btn === \"▶\"\n                  ? deleteOneDigitClickHandler\n                  : btn === \"MR\"\n                  ? memoryRecallClickHandler\n                  : btn === \"MC\"\n                  ? memoryClearClickHandler\n                  : btn === \"M+\"\n                  ? memoryPulusClickHandler\n                  : btn === \"M-\"\n                  ? memoryMinusClickHandler\n                  : btn === \"%\"\n                  ? percentClickHandler\n                  : btn === \"=\"\n                  ? equalsClickHandler\n                  : btn === \"/\" || btn === \"X\" || btn === \"-\" || btn === \"+\"\n                  ? signClickHandler\n                  : btn === \".\"\n                  ? comaClickHandler\n                  : numClickHandler\n              }\n            />\n          );\n        })}\n      </ButtonBox>\n    </Wrapper>\n  );\n};\n\nexport default App;\n","import { BrowserRouter as Router } from 'react-router-dom';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}